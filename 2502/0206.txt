아래는 위의 Python 코드를 Java로 변환한 것입니다.

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import java.util.Base64;

public class LicenseKeyGenerator {
    
    private static final String SECRET_KEY = "LXy"; // 예제 키 (길이 조정 필요)

    public static String encrypt(String data) {
        try {
            byte[] keyBytes = SECRET_KEY.getBytes();
            SecretKey secretKey = new SecretKeySpec(keyBytes, 0, 16, "AES");
            Cipher cipher = Cipher.getInstance("AES");
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);
            byte[] encryptedBytes = cipher.doFinal(data.getBytes());
            return Base64.getEncoder().encodeToString(encryptedBytes);
        } catch (Exception e) {
            return "invalid license";
        }
    }

    public static void makeLicenseKey(String productGroup, String productId) {
        String productKey = productGroup + productId;
        String licenseKey = encrypt(productKey);
        System.out.println("License Key: " + licenseKey);
    }

    public static void main(String[] args) {
        if (args.length != 2) {
            System.out.println("Usage: java LicenseKeyGenerator <product_group> <product_id>");
            System.exit(1);
        }
        String productGroup = args[0];
        String productId = args[1] + "prod";
        makeLicenseKey(productGroup, productId);
    }
}

변경 및 개선 사항

1. Fernet → AES 암호화

Java에서는 Fernet을 직접 지원하지 않으므로 AES 암호화를 사용했습니다.

키 길이는 16, 24, 32 바이트여야 하므로 조정해야 합니다.



2. 예외 처리

암호화 실패 시 "invalid license"를 반환하도록 했습니다.



3. CLI(명령어 실행 방식) 유지

Python 코드와 동일하게 터미널에서 실행할 수 있도록 했습니다.




사용 예시:

java LicenseKeyGenerator group1 12345

주의:

SECRET_KEY 길이는 AES 표준(16, 24, 32 바이트)에 맞게 조정해야 합니다.

더 강력한 키 관리를 위해 KeyGenerator를 활용하는 것이 좋습니다.


